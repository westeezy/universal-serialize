/**
 * Flowtype definitions for deserialize
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.14.1
 * @flow
 */

import type { Thenable } from "./types";
import type {
  SerializedError,
  SerializedRegex,
  SerializedDate,
} from "./serializers";
declare type Deserializer<V: mixed, S: mixed> = (
  serializedValue: S,
  key: string
) => V;
declare type PrimitiveDeserializer<V, S = V> = (
  serializedValue: S,
  key: string
) => V;
declare type Deserializers = {
  function?: any,
  error?: Deserializer<Error, SerializedError>,
  promise?: Deserializer<Thenable, any>,
  regex?: Deserializer<RegExp, SerializedRegex>,
  date?: Deserializer<Date, SerializedDate>,
  array?: PrimitiveDeserializer<$ReadOnlyArray<mixed>>,
  object?: PrimitiveDeserializer<{ [key: string]: any, ... }>,
  string?: PrimitiveDeserializer<string>,
  number?: PrimitiveDeserializer<number>,
  boolean?: PrimitiveDeserializer<boolean>,
  null?: PrimitiveDeserializer<null>,
  undefined?: PrimitiveDeserializer<void>,
  [key: string]: Deserializer<mixed, any>,
  ...
};
declare export function deserialize<T: mixed | null | void>(
  str: string,
  deserializers?: Deserializers
): T;
declare export {};
