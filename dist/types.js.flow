/**
 * Flowtype definitions for types
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.14.1
 * @flow
 */

import { $Values } from "utility-types";
import { TYPE } from "./constants";
declare export var TYPES: true;
export type TypeSerializableTypes = $Values<typeof TYPE>;
export type Thenable = {
  then: (
    onSuccess?: (val?: mixed) => mixed,
    onError?: (err?: mixed) => mixed
  ) => Thenable,
  catch: (onError?: (err?: mixed) => mixed) => Thenable,
  ...
};
export type NativeSerializedType<T: $Values<typeof TYPE>, V: mixed> = {
  __type__: T,
  __val__: V,
  ...
};
export type CustomSerializedType<T: string, V: mixed> = {
  __type__: T,
  __val__: V,
  ...
};
